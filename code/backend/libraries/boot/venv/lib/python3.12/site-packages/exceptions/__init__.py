import logging
from typing import Optional


# Configure logging to display error messages with timestamps and severity levels
logging.basicConfig(
    level=logging.ERROR,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'
)
logger = logging.getLogger(__name__)


class AppError(Exception):
    """
    Base class for all custom application errors with automatic logging.

    Attributes:
        status_code (int): HTTP status code associated with the error.
        error_code (str): Unique identifier for the error type.
        message (str): Human-readable error message.
    """
    status_code: int = 500
    error_code: str = 'app_error'
    message: str = "An unexpected error occurred."

    def __init__(
        self,
        message: Optional[str] = None,
        status_code: Optional[int] = None,
        error_code: Optional[str] = None
    ) -> None:
        """
        Initialize the AppError instance.

        Args:
            message (Optional[str]): Custom error message.
            status_code (Optional[int]): Custom HTTP status code.
            error_code (Optional[str]): Custom error code.
        """
        self.message = message or self.message
        self.status_code = status_code or self.status_code
        self.error_code = error_code or self.error_code
        super().__init__(self.message)
        self.log_error()

    def log_error(self) -> None:
        """Log the error details."""
        logger.error(
            f"{self.__class__.__name__} | "
            f"Message: {self.message} | "
            f"Status Code: {self.status_code} | "
            f"Error Code: {self.error_code}"
        )

    def __dict__(self):
        """
        Return a dictionary representation of the error.

        Returns:
            dict: Dictionary containing error details.
        """
        return {
            "error_code": self.error_code,
            "message": self.message,
            "status_code": self.status_code
        }


# ==========================
# Authentication Errors
# ==========================

class AuthenticationError(AppError):
    """
    Base class for authentication-related errors.
    """
    status_code: int = 401
    error_code: str = 'authentication_error'
    message: str = "Authentication failed."


class InvalidCredentialsError(AuthenticationError):
    """
    Raised when user provides invalid credentials.
    """
    error_code: str = 'invalid_credentials'
    message: str = "Invalid username or password."


class TokenExpiredError(AuthenticationError):
    """
    Raised when an authentication token has expired.
    """
    status_code: int = 401
    error_code: str = 'token_expired'
    message: str = "Authentication token has expired."


class UnauthorizedAccessError(AuthenticationError):
    """
    Raised when a user tries to access a resource without proper permissions.
    """
    status_code: int = 403
    error_code: str = 'unauthorized_access'
    message: str = "You do not have permission to access this resource."


# ==========================
# External Service Errors
# ==========================

class ExternalServiceError(AppError):
    """
    Base class for external service-related errors.
    """
    status_code: int = 502
    error_code: str = 'external_service_error'
    message: str = "An external service error occurred."


# ----- Google Service Errors -----

class GoogleServiceError(ExternalServiceError):
    """
    Base class for Google service-related errors.
    """
    error_code: str = 'google_service_error'
    message: str = "A Google service error occurred."


class GoogleAPIError(GoogleServiceError):
    """
    Raised when a Google API request fails.
    """
    error_code: str = 'google_api_error'
    message: str = "Failed to communicate with Google API."


# ----- LLM Service Errors -----

class LLMServiceError(ExternalServiceError):
    """
    Base class for Large Language Model (LLM) service-related errors.
    """
    error_code: str = 'llm_service_error'
    message: str = "An LLM service error occurred."


class ChatGPTServiceError(LLMServiceError):
    """
    Raised when a ChatGPT service request fails.
    """
    error_code: str = 'chatgpt_service_error'
    message: str = "Failed to communicate with ChatGPT service."


class LLAMAServerError(LLMServiceError):
    """
    Raised when a LLaMA server request fails.
    """
    error_code: str = 'llama_server_error'
    message: str = "Failed to communicate with LLaMA server."


class GeminiServiceError(LLMServiceError):
    """
    Raised when a Gemini service request fails.
    """
    error_code: str = 'gemini_service_error'
    message: str = "Failed to communicate with Gemini service."


# ==========================
# Database Errors
# ==========================

class DatabaseError(AppError):
    """
    Base class for database-related errors.
    """
    status_code: int = 500
    error_code: str = 'database_error'
    message: str = "A database error occurred."


class UserNotFoundError(DatabaseError):
    """
    Raised when a user is not found in the database.
    """
    status_code: int = 404
    error_code: str = 'user_not_found'
    message: str = "User not found."


class QueryFailedError(DatabaseError):
    """
    Raised when a database query fails.
    """
    error_code: str = 'query_failed'
    message: str = "Database query failed."


class ConnectionError(DatabaseError):
    """
    Raised when the database connection fails.
    """
    status_code: int = 503
    error_code: str = 'db_connection_error'
    message: str = "Failed to connect to the database."


# ==========================
# Validation Errors
# ==========================


class FileNotFoundError(AppError):
    """
    Raised when a file is not found.
    """
    status_code: int = 404
    error_code: str = 'file_not_found'
    message: str = "File not found."


class FileAlreadyExistsError(AppError):
    """
    Raised when a file already exists.
    """
    status_code: int = 409
    error_code: str = 'file_already_exists'
    message: str = "File already exists."

    
class ValidationError(AppError):
    """
    Base class for validation-related errors.
    """
    status_code: int = 400
    error_code: str = 'validation_error'
    message: str = "Input validation failed."


class MissingFieldError(ValidationError):
    """
    Raised when a required field is missing in the input.
    """
    error_code: str = 'missing_field'
    message: str = "A required field is missing."


class InvalidFormatError(ValidationError):
    """
    Raised when the input format is invalid.
    """
    error_code: str = 'invalid_format'
    message: str = "Invalid input format."


class ValueOutOfRangeError(ValidationError):
    """
    Raised when a value is out of the allowed range.
    """
    error_code: str = 'value_out_of_range'
    message: str = "Input value is out of the allowed range."


# ==========================
# Internal Server Errors
# ==========================

class InternalServerError(AppError):
    """
    Base class for internal server-related errors.
    """
    status_code: int = 500
    error_code: str = 'internal_server_error'
    message: str = "An internal server error occurred."


class ConfigurationError(InternalServerError):
    """
    Raised when there is a configuration issue.
    """
    error_code: str = 'configuration_error'
    message: str = "Server configuration error."


class DependencyError(InternalServerError):
    """
    Raised when a server dependency fails.
    """
    error_code: str = 'dependency_error'
    message: str = "A server dependency failed."


# -----------------------------------------------------
# Package specific errors
# -----------------------------------------------------

# AWS -------------------------------------------------

class AWSError(ExternalServiceError):
    """Base class for AWS service-related errors."""
    error_code = 'aws_error'
    message = "An AWS service error occurred."


class S3ServiceError(AWSError):
    """Raised when an S3 service request fails."""
    error_code = 's3_service_error'
    message = "Failed to communicate with S3 service."


class DynamoDBServiceError(AWSError):
    """Raised when a DynamoDB service request fails."""
    error_code = 'dynamodb_service_error'
    message = "Failed to communicate with DynamoDB service."


class SecretsManagerServiceError(AWSError):
    """Raised when a Secrets Manager service request fails."""
    error_code = 'secrets_manager_service_error'
    message = "Failed to communicate with Secrets Manager service."


class SQSServiceError(AWSError):
    """Raised when an SQS service request fails."""
    error_code = 'sqs_service_error'
    message = "Failed to communicate with SQS service."


class LLMInvalidModelError(ConfigurationError):
    """
    Raised when an invalid LLM model is specified.
    """
    error_code: str = 'llm_invalid_model'
    message: str = "Invalid LLM model specified."


class ContentError(AppError):
    """Exception raised for errors related to content processing."""
    status_code = 400
    error_code = 'content_error'
    message = "Content processing error."
    